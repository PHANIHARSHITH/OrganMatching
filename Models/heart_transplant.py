# -*- coding: utf-8 -*-
"""Heart_Transplant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FicQ51cpAxRnlmWn7GP1G2svrsgu68__
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/Heart_Transplant_edited.csv',low_memory=False)

df.head()

df.isna().sum()

# df.drop(columns=['GENDER','GENDER_DON','race','racedon','racematch',
#       'citizen','CITIZENDON','REGION','END_STAT','SHARE_TY',
#       'PROC_TY_HR','payer','PGE_TCR','CRSMATCH_DONE','DON_RETYP' ,
#       'DDAVP_DON','CMV_STATUS','HCV_SEROSTATUS','HBV_SUR_ANTIGEN','VDRL_DON',
#       'TBILI','MALIG','NUM_PREV_TX','HEMO_PA_MN_TRR','HIST_HYPERTENS_DON'
#       ,'DIABETES_DON','SGOT_DON','SGPT_DON','HIST_COCAINE_DON','vol_quartile'],axis='columns',inplace=True)

df.tail(12)

df = df[['AGE', 'AGE_DON', 'LV_EJECT', 'ISCHTIME', 'CREAT_TRR', 'CREAT_DON', 'diagnosis',
         'CODDON', 'BMI_CALC', 'BMI_DON_CALC', 'DAYSWAIT_CHRON', 'mcs', 'medcondition',
         'abo', 'ABOMAT', 'DISTANCE', 'HIST_MI', 'diabetes', 'TX_YEAR','365DaySurvival']]

df.info()

#To remove NUll values in numeric type values
df = df.fillna(df.median(numeric_only=True))

df.info()

#To remove Null values in Categorical type values
rem_null_cate = ['diagnosis','CODDON','mcs','medcondition','abo','ABOMAT','HIST_MI','diabetes','365DaySurvival']

for rem in rem_null_cate:
  df[rem] = df[rem].fillna(df[rem].mode()[0])

df.info()

df['diabetes'].unique()

df.isnull().sum().sum()

from sklearn.preprocessing import LabelEncoder
#For Ordinal Values
cat_cols = ['medcondition','ABOMAT']
le = LabelEncoder()

for col in cat_cols:
    df[col] = le.fit_transform(df[col])


#For nomial values
cat_cols = ['diagnosis', 'mcs','abo','CODDON','diabetes','HIST_MI']

df = pd.get_dummies(df, columns=cat_cols, drop_first=True)

df.info()

df.tail()

"""#Training Model

"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression

x = df.drop(columns=['365DaySurvival'],axis=1)
y = df['365DaySurvival']

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=0)

lr = LogisticRegression()
lr.fit(x_train,y_train)

from sklearn.metrics import accuracy_score

x_train_pred = lr.predict(x_train)
train_accuracy= accuracy_score(x_train_pred,y_train)

print("The Training accuracy is:",train_accuracy)

x_test_pred = lr.predict(x_test)
test_accuracy = accuracy_score(x_test_pred,y_test)
print("The testing accuracy is:",test_accuracy)

#This is for getting the values of the in  a particular to paste those values in below cell

#pd.set_option('display.max_columns', None)


#row_values = df.iloc[0].apply(lambda x: x.item()).tolist()
# row_values = df.iloc[0]
# print(row_values)

"""#This for Checking whether model is predicting correctly or not

"""

input_data = (55.0, 22, 50.0, 4.215820313, 1.11, 4.4, 23.32341806, 33.79878806, 3.0, 0, 1, 729.0, 2016,False, False, False, False, False, True, False, False, False, False, False, False, True, False, True, False, False, False, False, False, False, False, True, False)
np_array = np.asarray(input_data)
np_array_reshape = np_array.reshape(1,-1)
prediction = lr.predict(np_array_reshape)
print(prediction)

if (prediction[0]==0):
  print("Person has no heart disease")
else:
  print("Person has a heart disease")